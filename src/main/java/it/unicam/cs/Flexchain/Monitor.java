package it.unicam.cs.Flexchain;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Monitor extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50610ddc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639765146714610046578063992bc45b14610064578063fe9564f114610094575b600080fd5b61004e6100b0565b60405161005b9190610351565b60405180910390f35b61007e60048036038101906100799190610275565b610108565b60405161008b9190610336565b60405180910390f35b6100ae60048036038101906100a99190610275565b610144565b005b606060018054806020026020016040519081016040528092919081815260200182805480156100fe57602002820191906000526020600020905b8154815260200190600101908083116100ea575b5050505050905090565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3360405161015190610253565b61015b9190610336565b604051809103906000f080158015610177573d6000803e3d6000fd5b5060008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000805b60018054905081101561021757600181815481106101ed576101ec61046a565b5b906000526020600020015483141561020457600191505b808061020f906103f2565b9150506101cc565b5060001515811515141561024f5760018290806001815401808255809150506001900390600052602060002001600090919091909150555b5050565b6108f1806104b683390190565b60008135905061026f8161049e565b92915050565b60006020828403121561028b5761028a610499565b5b600061029984828501610260565b91505092915050565b60006102ae8383610327565b60208301905092915050565b6102c3816103ac565b82525050565b60006102d482610383565b6102de818561039b565b93506102e983610373565b8060005b8381101561031a57815161030188826102a2565b975061030c8361038e565b9250506001810190506102ed565b5085935050505092915050565b610330816103be565b82525050565b600060208201905061034b60008301846102ba565b92915050565b6000602082019050818103600083015261036b81846102c9565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b60006103b7826103c8565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103fd826103e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104305761042f61043b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6104a7816103be565b81146104b257600080fd5b5056fe608060405234801561001057600080fd5b506040516108f13803806108f18339818101604052810190610032919061008e565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610109565b600081519050610088816100f2565b92915050565b6000602082840312156100a4576100a36100ed565b5b60006100b284828501610079565b91505092915050565b60006100c6826100cd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fb816100bb565b811461010657600080fd5b50565b6107d9806101186000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630cc4e8d814610051578063893d20e81461008157806394bf28221461009f578063b489ab6d146100bd575b600080fd5b61006b600480360381019061006691906103c4565b6100d9565b60405161007891906104b8565b60405180910390f35b61008961010e565b6040516100969190610482565b60405180910390f35b6100a7610138565b6040516100b4919061049d565b60405180910390f35b6100d760048036038101906100d2919061031d565b610142565b005b60006004826040516100eb919061046b565b908152602001604051809103902060009054906101000a900460ff169050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b60005b83518110156101ad57828181518110610161576101606106f0565b5b6020026020010151600560008684815181106101805761017f6106f0565b5b602002602001015181526020019081526020016000208190555080806101a590610649565b915050610145565b5060026004826040516101c0919061046b565b908152602001604051809103902060006101000a81548160ff021916908360028111156101f0576101ef6106c1565b5b0217905550505050565b600061020d610208846104f8565b6104d3565b905080838252602082019050828560208602820111156102305761022f610753565b5b60005b85811015610260578161024688826102da565b845260208401935060208301925050600181019050610233565b5050509392505050565b600061027d61027884610524565b6104d3565b90508281526020810184848401111561029957610298610758565b5b6102a48482856105d6565b509392505050565b600082601f8301126102c1576102c061074e565b5b81356102d18482602086016101fa565b91505092915050565b6000813590506102e98161078c565b92915050565b600082601f8301126103045761030361074e565b5b813561031484826020860161026a565b91505092915050565b60008060006060848603121561033657610335610762565b5b600084013567ffffffffffffffff8111156103545761035361075d565b5b610360868287016102ac565b935050602084013567ffffffffffffffff8111156103815761038061075d565b5b61038d868287016102ac565b925050604084013567ffffffffffffffff8111156103ae576103ad61075d565b5b6103ba868287016102ef565b9150509250925092565b6000602082840312156103da576103d9610762565b5b600082013567ffffffffffffffff8111156103f8576103f761075d565b5b610404848285016102ef565b91505092915050565b6104168161056b565b82525050565b6104258161057d565b82525050565b610434816105c4565b82525050565b600061044582610555565b61044f8185610560565b935061045f8185602086016105e5565b80840191505092915050565b6000610477828461043a565b915081905092915050565b6000602082019050610497600083018461040d565b92915050565b60006020820190506104b2600083018461041c565b92915050565b60006020820190506104cd600083018461042b565b92915050565b60006104dd6104ee565b90506104e98282610618565b919050565b6000604051905090565b600067ffffffffffffffff8211156105135761051261071f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561053f5761053e61071f565b5b61054882610767565b9050602081019050919050565b600081519050919050565b600081905092915050565b60006105768261059a565b9050919050565b6000819050919050565b600081905061059582610778565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105cf82610587565b9050919050565b82818337600083830152505050565b60005b838110156106035780820151818401526020810190506105e8565b83811115610612576000848401525b50505050565b61062182610767565b810181811067ffffffffffffffff821117156106405761063f61071f565b5b80604052505050565b6000610654826105ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561068757610686610692565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60038110610789576107886106c1565b5b50565b6107958161057d565b81146107a057600080fd5b5056fea2646970667358221220ea92ca9f880ece4e5b7d624b2364a62d4bd3d7b031a84a9d4a98bf83c3834a4464736f6c63430008070033a2646970667358221220336fc670efd2fa7a8db013ae3538c37cdbbc9b8c43a8cd66499cb9292174ce5164736f6c63430008070033";

    public static final String FUNC_GETDIAGRAMNAMES = "getDiagramNames";

    public static final String FUNC_GETPROCESS = "getProcess";

    public static final String FUNC_INSTANTIATEPROCESS = "instantiateProcess";

    @Deprecated
    protected Monitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Monitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Monitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Monitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<List> getDiagramNames() {
        final Function function = new Function(FUNC_GETDIAGRAMNAMES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getProcess(byte[] processName) {
        final Function function = new Function(FUNC_GETPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(processName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> instantiateProcess(byte[] processName) {
        final Function function = new Function(
                FUNC_INSTANTIATEPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(processName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Monitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Monitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Monitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Monitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Monitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Monitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Monitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Monitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Monitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Monitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Monitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Monitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Monitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Monitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Monitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Monitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
