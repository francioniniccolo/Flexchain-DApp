package it.unicam.cs.Flexchain;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Monitor extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50611bea806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632b9f6ac9146100515780633efabd491461006d578063976514671461009d5780639a2a95de146100bb575b600080fd5b61006b600480360381019061006691906105aa565b6100eb565b005b610087600480360381019061008291906105aa565b610264565b60405161009491906107b1565b60405180910390f35b6100a5610328565b6040516100b291906107cc565b60405180910390f35b6100d560048036038101906100d091906105aa565b610401565b6040516100e291906107ee565b60405180910390f35b336040516100f890610448565b61010291906107b1565b604051809103906000f08015801561011e573d6000803e3d6000fd5b5060008260405161012f9190610783565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000805b60018054905081101561021557600181815481106101a05761019f610a92565b5b906000526020600020016040516020016101ba919061079a565b60405160208183030381529060405280519060200120836040516020016101e19190610783565b60405160208183030381529060405280519060200120141561020257600191505b808061020d906109eb565b91505061017f565b506000151581151514156102605760018290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061025e929190610455565b505b5050565b600080826040516102759190610783565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e957600080fd5b505afa1580156102fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610321919061057d565b9050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156103f857838290600052602060002001805461036b90610988565b80601f016020809104026020016040519081016040528092919081815260200182805461039790610988565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b50505050508152602001906001019061034c565b50505050905090565b600080826040516104129190610783565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61108880610b2d83390190565b82805461046190610988565b90600052602060002090601f01602090048101928261048357600085556104ca565b82601f1061049c57805160ff19168380011785556104ca565b828001600101855582156104ca579182015b828111156104c95782518255916020019190600101906104ae565b5b5090506104d791906104db565b5090565b5b808211156104f45760008160009055506001016104dc565b5090565b600061050b6105068461082e565b610809565b90508281526020810184848401111561052757610526610af5565b5b610532848285610946565b509392505050565b60008151905061054981610b15565b92915050565b600082601f83011261056457610563610af0565b5b81356105748482602086016104f8565b91505092915050565b60006020828403121561059357610592610aff565b5b60006105a18482850161053a565b91505092915050565b6000602082840312156105c0576105bf610aff565b5b600082013567ffffffffffffffff8111156105de576105dd610afa565b5b6105ea8482850161054f565b91505092915050565b60006105ff838361069a565b905092915050565b610610816108d4565b82525050565b600061062182610884565b61062b81856108a7565b93508360208202850161063d8561085f565b8060005b85811015610679578484038952815161065a85826105f3565b94506106658361089a565b925060208a01995050600181019050610641565b50829750879550505050505092915050565b61069481610910565b82525050565b60006106a58261088f565b6106af81856108b8565b93506106bf818560208601610955565b6106c881610b04565b840191505092915050565b60006106de8261088f565b6106e881856108c9565b93506106f8818560208601610955565b80840191505092915050565b6000815461071181610988565b61071b81866108c9565b9450600182166000811461073657600181146107475761077a565b60ff1983168652818601935061077a565b6107508561086f565b60005b8381101561077257815481890152600182019150602081019050610753565b838801955050505b50505092915050565b600061078f82846106d3565b915081905092915050565b60006107a68284610704565b915081905092915050565b60006020820190506107c66000830184610607565b92915050565b600060208201905081810360008301526107e68184610616565b905092915050565b6000602082019050610803600083018461068b565b92915050565b6000610813610824565b905061081f82826109ba565b919050565b6000604051905090565b600067ffffffffffffffff82111561084957610848610ac1565b5b61085282610b04565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006108df826108e6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061091b82610922565b9050919050565b600061092d82610934565b9050919050565b600061093f826108e6565b9050919050565b82818337600083830152505050565b60005b83811015610973578082015181840152602081019050610958565b83811115610982576000848401525b50505050565b600060028204905060018216806109a057607f821691505b602082108114156109b4576109b3610a63565b5b50919050565b6109c382610b04565b810181811067ffffffffffffffff821117156109e2576109e1610ac1565b5b80604052505050565b60006109f682610906565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a2957610a28610a34565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610b1e816108d4565b8114610b2957600080fd5b5056fe60806040523480156200001157600080fd5b506040516200108838038062001088833981810160405281019062000037919062000096565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600081519050620000908162000101565b92915050565b600060208284031215620000af57620000ae620000fc565b5b6000620000bf848285016200007f565b91505092915050565b6000620000d582620000dc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200010c81620000c8565b81146200011857600080fd5b50565b610f5d806200012b6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063893d20e81161005b578063893d20e81461012557806394bf282214610143578063e96f8ba514610161578063f27a6e221461017d57610088565b80630cc4e8d81461008d578063122c3c78146100bd5780631bd95155146100d9578063857ac45d14610109575b600080fd5b6100a760048036038101906100a2919061072b565b61019b565b6040516100b491906109ef565b60405180910390f35b6100d760048036038101906100d291906106b3565b6101d0565b005b6100f360048036038101906100ee919061072b565b6101d4565b6040516101009190610a63565b60405180910390f35b610123600480360381019061011e91906107ec565b610274565b005b61012d6102a6565b60405161013a91906109d4565b60405180910390f35b61014b6102d0565b6040516101589190610a0a565b60405180910390f35b61017b60048036038101906101769190610774565b610362565b005b61018561039f565b6040516101929190610a0a565b60405180910390f35b60006003826040516101ad91906109bd565b908152602001604051809103902060009054906101000a900460ff169050919050565b5050565b6000808290506000809250600090505b815181101561026d57600082828151811061020257610201610e74565b5b602001015160f81c60f81b60f81c905060308160ff161015801561022a575060398160ff1611155b156102595760308161023c9190610c4d565b60ff16600a8561024c9190610bf3565b6102569190610b9d565b93505b50808061026590610d9e565b9150506101e4565b5050919050565b816001908051906020019061028a929190610431565b5080600090805190602001906102a1929190610431565b505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546102df90610d3b565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90610d3b565b80156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b5050505050905090565b7f3be6db30a3513d60905e653d96c44308a41ff4ad025e6874321674c5b1857af18282604051610393929190610a2c565b60405180910390a15050565b6060600080546103ae90610d3b565b80601f01602080910402602001604051908101604052809291908181526020018280546103da90610d3b565b80156104275780601f106103fc57610100808354040283529160200191610427565b820191906000526020600020905b81548152906001019060200180831161040a57829003601f168201915b5050505050905090565b82805461043d90610d3b565b90600052602060002090601f01602090048101928261045f57600085556104a6565b82601f1061047857805160ff19168380011785556104a6565b828001600101855582156104a6579182015b828111156104a557825182559160200191906001019061048a565b5b5090506104b391906104b7565b5090565b5b808211156104d05760008160009055506001016104b8565b5090565b60006104e76104e284610aa3565b610a7e565b9050808382526020820190508285602086028201111561050a57610509610ed7565b5b60005b8581101561053a57816105208882610670565b84526020840193506020830192505060018101905061050d565b5050509392505050565b600061055761055284610acf565b610a7e565b9050808382526020820190508285602086028201111561057a57610579610ed7565b5b60005b858110156105c857813567ffffffffffffffff8111156105a05761059f610ed2565b5b8086016105ad8982610685565b8552602085019450602084019350505060018101905061057d565b5050509392505050565b60006105e56105e084610afb565b610a7e565b90508281526020810184848401111561060157610600610edc565b5b61060c848285610cf9565b509392505050565b600082601f83011261062957610628610ed2565b5b81356106398482602086016104d4565b91505092915050565b600082601f83011261065757610656610ed2565b5b8135610667848260208601610544565b91505092915050565b60008135905061067f81610f10565b92915050565b600082601f83011261069a57610699610ed2565b5b81356106aa8482602086016105d2565b91505092915050565b600080604083850312156106ca576106c9610ee6565b5b600083013567ffffffffffffffff8111156106e8576106e7610ee1565b5b6106f485828601610642565b925050602083013567ffffffffffffffff81111561071557610714610ee1565b5b61072185828601610614565b9150509250929050565b60006020828403121561074157610740610ee6565b5b600082013567ffffffffffffffff81111561075f5761075e610ee1565b5b61076b84828501610685565b91505092915050565b6000806040838503121561078b5761078a610ee6565b5b600083013567ffffffffffffffff8111156107a9576107a8610ee1565b5b6107b585828601610685565b925050602083013567ffffffffffffffff8111156107d6576107d5610ee1565b5b6107e285828601610642565b9150509250929050565b6000806040838503121561080357610802610ee6565b5b600083013567ffffffffffffffff81111561082157610820610ee1565b5b61082d85828601610685565b925050602083013567ffffffffffffffff81111561084e5761084d610ee1565b5b61085a85828601610685565b9150509250929050565b6000610870838361090b565b905092915050565b61088181610c81565b82525050565b600061089282610b3c565b61089c8185610b5f565b9350836020820285016108ae85610b2c565b8060005b858110156108ea57848403895281516108cb8582610864565b94506108d683610b52565b925060208a019950506001810190506108b2565b50829750879550505050505092915050565b61090581610ce7565b82525050565b600061091682610b47565b6109208185610b70565b9350610930818560208601610d08565b61093981610eeb565b840191505092915050565b600061094f82610b47565b6109598185610b81565b9350610969818560208601610d08565b61097281610eeb565b840191505092915050565b600061098882610b47565b6109928185610b92565b93506109a2818560208601610d08565b80840191505092915050565b6109b781610cd0565b82525050565b60006109c9828461097d565b915081905092915050565b60006020820190506109e96000830184610878565b92915050565b6000602082019050610a0460008301846108fc565b92915050565b60006020820190508181036000830152610a248184610944565b905092915050565b60006040820190508181036000830152610a468185610944565b90508181036020830152610a5a8184610887565b90509392505050565b6000602082019050610a7860008301846109ae565b92915050565b6000610a88610a99565b9050610a948282610d6d565b919050565b6000604051905090565b600067ffffffffffffffff821115610abe57610abd610ea3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610aea57610ae9610ea3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610b1657610b15610ea3565b5b610b1f82610eeb565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610ba882610cd0565b9150610bb383610cd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610be857610be7610de7565b5b828201905092915050565b6000610bfe82610cd0565b9150610c0983610cd0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c4257610c41610de7565b5b828202905092915050565b6000610c5882610cda565b9150610c6383610cda565b925082821015610c7657610c75610de7565b5b828203905092915050565b6000610c8c82610cb0565b9050919050565b6000819050919050565b6000819050610cab82610efc565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610cf282610c9d565b9050919050565b82818337600083830152505050565b60005b83811015610d26578082015181840152602081019050610d0b565b83811115610d35576000848401525b50505050565b60006002820490506001821680610d5357607f821691505b60208210811415610d6757610d66610e45565b5b50919050565b610d7682610eeb565b810181811067ffffffffffffffff82111715610d9557610d94610ea3565b5b80604052505050565b6000610da982610cd0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ddc57610ddb610de7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60038110610f0d57610f0c610e16565b5b50565b610f1981610c93565b8114610f2457600080fd5b5056fea2646970667358221220c68dd88800970cd14e0b31eb7b6884d6c8af9476451b7c9a7646245405e58f2964736f6c63430008070033a2646970667358221220b3a7678e53534af24fb3dc43455f07f2227c3f0032033a344400c86a5e0f4b1f64736f6c63430008070033";

    public static final String FUNC_INSTANTIATEPROCESS = "instantiateProcess";

    public static final String FUNC_GETDIAGRAMNAMES = "getDiagramNames";

    public static final String FUNC_GETPROCESS = "getProcess";

    public static final String FUNC_GETPROCESSOWNER = "getProcessOwner";

    @Deprecated
    protected Monitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Monitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Monitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Monitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> instantiateProcess(String processName) {
        final Function function = new Function(
                FUNC_INSTANTIATEPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(processName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getDiagramNames() {
        final Function function = new Function(FUNC_GETDIAGRAMNAMES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getProcess(String processName) {
        final Function function = new Function(FUNC_GETPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(processName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getProcessOwner(String processName) {
        final Function function = new Function(FUNC_GETPROCESSOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(processName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Monitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Monitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Monitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Monitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Monitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Monitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Monitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Monitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Monitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Monitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Monitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Monitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Monitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Monitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Monitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Monitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
