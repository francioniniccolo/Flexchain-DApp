package it.unicam.cs.Flexchain;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Monitor extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50611b76806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632b9f6ac9146100515780633efabd491461006d578063976514671461009d5780639a2a95de146100bb575b600080fd5b61006b600480360381019061006691906105aa565b6100eb565b005b610087600480360381019061008291906105aa565b610264565b60405161009491906107b1565b60405180910390f35b6100a5610328565b6040516100b291906107cc565b60405180910390f35b6100d560048036038101906100d091906105aa565b610401565b6040516100e291906107ee565b60405180910390f35b336040516100f890610448565b61010291906107b1565b604051809103906000f08015801561011e573d6000803e3d6000fd5b5060008260405161012f9190610783565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000805b60018054905081101561021557600181815481106101a05761019f610a92565b5b906000526020600020016040516020016101ba919061079a565b60405160208183030381529060405280519060200120836040516020016101e19190610783565b60405160208183030381529060405280519060200120141561020257600191505b808061020d906109eb565b91505061017f565b506000151581151514156102605760018290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061025e929190610455565b505b5050565b600080826040516102759190610783565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e957600080fd5b505afa1580156102fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610321919061057d565b9050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156103f857838290600052602060002001805461036b90610988565b80601f016020809104026020016040519081016040528092919081815260200182805461039790610988565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b50505050508152602001906001019061034c565b50505050905090565b600080826040516104129190610783565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61101480610b2d83390190565b82805461046190610988565b90600052602060002090601f01602090048101928261048357600085556104ca565b82601f1061049c57805160ff19168380011785556104ca565b828001600101855582156104ca579182015b828111156104c95782518255916020019190600101906104ae565b5b5090506104d791906104db565b5090565b5b808211156104f45760008160009055506001016104dc565b5090565b600061050b6105068461082e565b610809565b90508281526020810184848401111561052757610526610af5565b5b610532848285610946565b509392505050565b60008151905061054981610b15565b92915050565b600082601f83011261056457610563610af0565b5b81356105748482602086016104f8565b91505092915050565b60006020828403121561059357610592610aff565b5b60006105a18482850161053a565b91505092915050565b6000602082840312156105c0576105bf610aff565b5b600082013567ffffffffffffffff8111156105de576105dd610afa565b5b6105ea8482850161054f565b91505092915050565b60006105ff838361069a565b905092915050565b610610816108d4565b82525050565b600061062182610884565b61062b81856108a7565b93508360208202850161063d8561085f565b8060005b85811015610679578484038952815161065a85826105f3565b94506106658361089a565b925060208a01995050600181019050610641565b50829750879550505050505092915050565b61069481610910565b82525050565b60006106a58261088f565b6106af81856108b8565b93506106bf818560208601610955565b6106c881610b04565b840191505092915050565b60006106de8261088f565b6106e881856108c9565b93506106f8818560208601610955565b80840191505092915050565b6000815461071181610988565b61071b81866108c9565b9450600182166000811461073657600181146107475761077a565b60ff1983168652818601935061077a565b6107508561086f565b60005b8381101561077257815481890152600182019150602081019050610753565b838801955050505b50505092915050565b600061078f82846106d3565b915081905092915050565b60006107a68284610704565b915081905092915050565b60006020820190506107c66000830184610607565b92915050565b600060208201905081810360008301526107e68184610616565b905092915050565b6000602082019050610803600083018461068b565b92915050565b6000610813610824565b905061081f82826109ba565b919050565b6000604051905090565b600067ffffffffffffffff82111561084957610848610ac1565b5b61085282610b04565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006108df826108e6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061091b82610922565b9050919050565b600061092d82610934565b9050919050565b600061093f826108e6565b9050919050565b82818337600083830152505050565b60005b83811015610973578082015181840152602081019050610958565b83811115610982576000848401525b50505050565b600060028204905060018216806109a057607f821691505b602082108114156109b4576109b3610a63565b5b50919050565b6109c382610b04565b810181811067ffffffffffffffff821117156109e2576109e1610ac1565b5b80604052505050565b60006109f682610906565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a2957610a28610a34565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610b1e816108d4565b8114610b2957600080fd5b5056fe608060405234801561001057600080fd5b50604051620010143803806200101483398181016040528101906100349190610090565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010b565b60008151905061008a816100f4565b92915050565b6000602082840312156100a6576100a56100ef565b5b60006100b48482850161007b565b91505092915050565b60006100c8826100cf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fd816100bd565b811461010857600080fd5b50565b610ef9806200011b6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b489ab6d1161005b578063b489ab6d14610115578063e96f8ba514610131578063f27a6e221461014d578063f4d0c2b81461016b57610088565b80630cc4e8d81461008d578063857ac45d146100bd578063893d20e8146100d957806394bf2822146100f7575b600080fd5b6100a760048036038101906100a291906107b8565b61019b565b6040516100b49190610a97565b60405180910390f35b6100d760048036038101906100d29190610879565b6101d0565b005b6100e1610202565b6040516100ee9190610a61565b60405180910390f35b6100ff61022c565b60405161010c9190610ab2565b60405180910390f35b61012f600480360381019061012a91906106e4565b6102be565b005b61014b60048036038101906101469190610801565b610376565b005b6101556103b3565b6040516101629190610ab2565b60405180910390f35b6101856004803603810190610180919061078b565b610445565b6040516101929190610a7c565b60405180910390f35b60006004826040516101ad9190610a4a565b908152602001604051809103902060009054906101000a900460ff169050919050565b81600190805190602001906101e6929190610462565b5080600090805190602001906101fd929190610462565b505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461023b90610cd7565b80601f016020809104026020016040519081016040528092919081815260200182805461026790610cd7565b80156102b45780601f10610289576101008083540402835291602001916102b4565b820191906000526020600020905b81548152906001019060200180831161029757829003601f168201915b5050505050905090565b60005b8351811015610329578281815181106102dd576102dc610e10565b5b6020026020010151600560008684815181106102fc576102fb610e10565b5b6020026020010151815260200190815260200160002081905550808061032190610d3a565b9150506102c1565b50600260048260405161033c9190610a4a565b908152602001604051809103902060006101000a81548160ff0219169083600281111561036c5761036b610db2565b5b0217905550505050565b7f3be6db30a3513d60905e653d96c44308a41ff4ad025e6874321674c5b1857af182826040516103a7929190610ad4565b60405180910390a15050565b6060600080546103c290610cd7565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee90610cd7565b801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b5050505050905090565b600060056000838152602001908152602001600020549050919050565b82805461046e90610cd7565b90600052602060002090601f01602090048101928261049057600085556104d7565b82601f106104a957805160ff19168380011785556104d7565b828001600101855582156104d7579182015b828111156104d65782518255916020019190600101906104bb565b5b5090506104e491906104e8565b5090565b5b808211156105015760008160009055506001016104e9565b5090565b600061051861051384610b30565b610b0b565b9050808382526020820190508285602086028201111561053b5761053a610e73565b5b60005b8581101561056b578161055188826106a1565b84526020840193506020830192505060018101905061053e565b5050509392505050565b600061058861058384610b5c565b610b0b565b905080838252602082019050828560208602820111156105ab576105aa610e73565b5b60005b858110156105f957813567ffffffffffffffff8111156105d1576105d0610e6e565b5b8086016105de89826106b6565b855260208501945060208401935050506001810190506105ae565b5050509392505050565b600061061661061184610b88565b610b0b565b90508281526020810184848401111561063257610631610e78565b5b61063d848285610c95565b509392505050565b600082601f83011261065a57610659610e6e565b5b813561066a848260208601610505565b91505092915050565b600082601f83011261068857610687610e6e565b5b8135610698848260208601610575565b91505092915050565b6000813590506106b081610eac565b92915050565b600082601f8301126106cb576106ca610e6e565b5b81356106db848260208601610603565b91505092915050565b6000806000606084860312156106fd576106fc610e82565b5b600084013567ffffffffffffffff81111561071b5761071a610e7d565b5b61072786828701610645565b935050602084013567ffffffffffffffff81111561074857610747610e7d565b5b61075486828701610645565b925050604084013567ffffffffffffffff81111561077557610774610e7d565b5b610781868287016106b6565b9150509250925092565b6000602082840312156107a1576107a0610e82565b5b60006107af848285016106a1565b91505092915050565b6000602082840312156107ce576107cd610e82565b5b600082013567ffffffffffffffff8111156107ec576107eb610e7d565b5b6107f8848285016106b6565b91505092915050565b6000806040838503121561081857610817610e82565b5b600083013567ffffffffffffffff81111561083657610835610e7d565b5b610842858286016106b6565b925050602083013567ffffffffffffffff81111561086357610862610e7d565b5b61086f85828601610673565b9150509250929050565b600080604083850312156108905761088f610e82565b5b600083013567ffffffffffffffff8111156108ae576108ad610e7d565b5b6108ba858286016106b6565b925050602083013567ffffffffffffffff8111156108db576108da610e7d565b5b6108e7858286016106b6565b9150509250929050565b60006108fd83836109a7565b905092915050565b61090e81610c2a565b82525050565b600061091f82610bc9565b6109298185610bec565b93508360208202850161093b85610bb9565b8060005b85811015610977578484038952815161095885826108f1565b945061096383610bdf565b925060208a0199505060018101905061093f565b50829750879550505050505092915050565b61099281610c3c565b82525050565b6109a181610c83565b82525050565b60006109b282610bd4565b6109bc8185610bfd565b93506109cc818560208601610ca4565b6109d581610e87565b840191505092915050565b60006109eb82610bd4565b6109f58185610c0e565b9350610a05818560208601610ca4565b610a0e81610e87565b840191505092915050565b6000610a2482610bd4565b610a2e8185610c1f565b9350610a3e818560208601610ca4565b80840191505092915050565b6000610a568284610a19565b915081905092915050565b6000602082019050610a766000830184610905565b92915050565b6000602082019050610a916000830184610989565b92915050565b6000602082019050610aac6000830184610998565b92915050565b60006020820190508181036000830152610acc81846109e0565b905092915050565b60006040820190508181036000830152610aee81856109e0565b90508181036020830152610b028184610914565b90509392505050565b6000610b15610b26565b9050610b218282610d09565b919050565b6000604051905090565b600067ffffffffffffffff821115610b4b57610b4a610e3f565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610b7757610b76610e3f565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610ba357610ba2610e3f565b5b610bac82610e87565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610c3582610c59565b9050919050565b6000819050919050565b6000819050610c5482610e98565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c8e82610c46565b9050919050565b82818337600083830152505050565b60005b83811015610cc2578082015181840152602081019050610ca7565b83811115610cd1576000848401525b50505050565b60006002820490506001821680610cef57607f821691505b60208210811415610d0357610d02610de1565b5b50919050565b610d1282610e87565b810181811067ffffffffffffffff82111715610d3157610d30610e3f565b5b80604052505050565b6000610d4582610c79565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7857610d77610d83565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60038110610ea957610ea8610db2565b5b50565b610eb581610c3c565b8114610ec057600080fd5b5056fea26469706673582212201682fa1cf8fe56334eb9932bcd39397c0bc2e012ec90a13fc7c2c208732fb8b464736f6c63430008070033a264697066735822122066cdce4fbe972208bacb6163039897270b26dfb910a6e5b7fc31692759116b7464736f6c63430008070033";

    public static final String FUNC_GETDIAGRAMNAMES = "getDiagramNames";

    public static final String FUNC_GETPROCESS = "getProcess";

    public static final String FUNC_GETPROCESSOWNER = "getProcessOwner";

    public static final String FUNC_INSTANTIATEPROCESS = "instantiateProcess";

    @Deprecated
    protected Monitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Monitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Monitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Monitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<List> getDiagramNames() {
        final Function function = new Function(FUNC_GETDIAGRAMNAMES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getProcess(String processName) {
        final Function function = new Function(FUNC_GETPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(processName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getProcessOwner(String processName) {
        final Function function = new Function(FUNC_GETPROCESSOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(processName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> instantiateProcess(String processName) {
        final Function function = new Function(
                FUNC_INSTANTIATEPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(processName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Monitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Monitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Monitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Monitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Monitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Monitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Monitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Monitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Monitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Monitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Monitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Monitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Monitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Monitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Monitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Monitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
